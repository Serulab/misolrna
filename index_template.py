#!/usr/bin/env python




##################################################
## DEPENDENCIES
import sys
import os
import os.path
try:
    import builtins as builtin
except ImportError:
    import __builtin__ as builtin
from os.path import getmtime, exists
import time
import types
from Cheetah.Version import MinCompatibleVersion as RequiredCheetahVersion
from Cheetah.Version import MinCompatibleVersionTuple as RequiredCheetahVersionTuple
from Cheetah.Template import Template
from Cheetah.DummyTransaction import *
from Cheetah.NameMapper import NotFound, valueForName, valueFromSearchList, valueFromFrameOrSearchList
from Cheetah.CacheRegion import CacheRegion
import Cheetah.Filters as Filters
import Cheetah.ErrorCatchers as ErrorCatchers

##################################################
## MODULE CONSTANTS
VFFSL=valueFromFrameOrSearchList
VFSL=valueFromSearchList
VFN=valueForName
currentTime=time.time
__CHEETAH_version__ = '2.4.4'
__CHEETAH_versionTuple__ = (2, 4, 4, 'development', 0)
__CHEETAH_genTime__ = 1311971236.3824649
__CHEETAH_genTimestamp__ = 'Fri Jul 29 16:27:16 2011'
__CHEETAH_src__ = 'index_template'
__CHEETAH_srcLastModified__ = 'Mon Nov  8 21:33:54 2010'
__CHEETAH_docstring__ = 'Autogenerated by Cheetah: The Python-Powered Template Engine'

if __CHEETAH_versionTuple__ < RequiredCheetahVersionTuple:
    raise AssertionError(
      'This template was compiled with Cheetah version'
      ' %s. Templates compiled before version %s must be recompiled.'%(
         __CHEETAH_version__, RequiredCheetahVersion))

##################################################
## CLASSES

class index_template(Template):

    ##################################################
    ## CHEETAH GENERATED METHODS


    def __init__(self, *args, **KWs):

        super(index_template, self).__init__(*args, **KWs)
        if not self._CHEETAH__instanceInitialized:
            cheetahKWArgs = {}
            allowedKWs = 'searchList namespaces filter filtersLib errorCatcher'.split()
            for k,v in KWs.items():
                if k in allowedKWs: cheetahKWArgs[k] = v
            self._initCheetahInstance(**cheetahKWArgs)
        

    def respond(self, trans=None):



        ## CHEETAH: main method generated for this template
        if (not trans and not self._CHEETAH__isBuffering and not callable(self.transaction)):
            trans = self.transaction # is None unless self.awake() was called
        if not trans:
            trans = DummyTransaction()
            _dummyTrans = True
        else: _dummyTrans = False
        write = trans.response().write
        SL = self._CHEETAH__searchList
        _filter = self._CHEETAH__currentFilter
        
        ########################################
        ## START - generated method body
        
        url = 'http://www.misolrna.org'
        imgurl = 'http://img.misolrna.org'
        fixurl = 'http://fix.misolrna.org'
        write(u'''
''')
        displayopts = '''Display:<br />   
<input name="metab" type="checkbox" checked /> 
<a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,'metabolite QTL (QML) defined by <a href=\\'http://www.nature.com/nbt/journal/v24/n4/abs/nbt1192.html\\'>Schauer et al (2006)</a> by using <a href=\\'http://www.sgn.cornell.edu/cview/map.pl?map_id=il6&show_offsets=1&show_ruler=1\\'>S. pennellii introgression lines population</a>');return false">QTL</a><br /> 
<input name="fromto" type="checkbox" checked /> 
<a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,'Target map genetic position (Bin, Metabolite (QML) and, QTL)');return false">Target Localization</a><br /> 
<input name="hitdef" type="checkbox" checked /> 
<a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,'Gene annotation');return false">Hit Definition</a><br />      
<input name="alig" type="checkbox" checked /> 
<a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,'Alignment between the mature miRNA and the recognized sequence of the putative target gene.');return false">Alignment</a><br /> 
<input name="exp" type="checkbox" checked /> 
<a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,'Microarray data in tomato fruit development');return false">Target expression profile</a><br />
<input name="xls" type="checkbox" checked /> 
<a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,'Results formated as Excel spreadsheet');return false">Results in xls (Excel) format</a><br />
 <input type="reset"  /> 
 <input type="submit" />
 </form> 
</div>'''
        write(u'''
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <title>''')
        _v = VFFSL(SL,"page_title",True) # u'$page_title' on line 26, col 12
        if _v is not None: write(_filter(_v, rawExpr=u'$page_title')) # from line 26, col 12.
        write(u'''</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <style type="text/css" media="screen">@import "''')
        _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 28, col 52
        if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 28, col 52.
        write(u'''/basic.css";</style>
    <style type="text/css" media="screen">@import "''')
        _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 29, col 52
        if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 29, col 52.
        write(u'''/tabs.css";</style>

<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.1/build/fonts/fonts-min.css" /> 
<link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/2.8.1/build/autocomplete/assets/skins/sam/autocomplete.css" /> 
<script type="text/javascript" src="http://yui.yahooapis.com/2.8.1/build/yahoo-dom-event/yahoo-dom-event.js"></script> 
<script type="text/javascript" src="http://yui.yahooapis.com/2.8.1/build/animation/animation-min.js"></script> 
<script type="text/javascript" src="http://yui.yahooapis.com/2.8.1/build/datasource/datasource-min.js"></script> 
<script type="text/javascript" src="http://yui.yahooapis.com/2.8.1/build/autocomplete/autocomplete-min.js"></script> 
 
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js"></script>  
 
''')
        if VFFSL(SL,"page_type",True) == 'search': # generated from line 40, col 1
            write(u'''<link rel="stylesheet" type="text/css" href="''')
            _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 41, col 46
            if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 41, col 46.
            write(u'''/autocomp.css" /> 

''')
        write(u'''
<script type="text/javascript" src="''')
        _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 45, col 37
        if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 45, col 37.
        write(u'''/toolt.js"></script> 

''')
        if VFFSL(SL,"page_type",True) == 'blast': # generated from line 47, col 1
            write(u'''<script type="text/javascript" src="''')
            _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 48, col 37
            if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 48, col 37.
            write(u'''/blastajax.js"></script> 


''')
        write(u'''

</head>
''')
        if VFFSL(SL,"page_type",True) == 'search': # generated from line 55, col 1
            write(u'''<body class="yui-skin-sam" onload="ocultartodos();">
''')
        else: # generated from line 57, col 1
            write(u'''<body>
''')
        write(u'''    <h1><a href="/">miSolRNA</a></h1>
    <div id="header">
    <ul id="primary">
''')
        if VFFSL(SL,"page_type",True) == 'home': # generated from line 63, col 5
            write(u'''        <li><span><a href="/">Home</a></span></li>
''')
        else: # generated from line 65, col 5
            write(u'''        <li><a href="/">Home</a></li>
''')
        if VFFSL(SL,"page_type",True) == 'search': # generated from line 68, col 5
            write(u'''        <li><span><a href="/search">Search</a></span></li>
''')
        else: # generated from line 70, col 5
            write(u'''        <li><a href="/search">Search</a></li>
''')
        write(u'''    
''')
        if VFFSL(SL,"page_type",True) == 'blast': # generated from line 74, col 5
            write(u'''        <li><span><a href="/blast">BLAST</a></span></li>
''')
        else: # generated from line 76, col 5
            write(u'''        <li><a href="/blast">BLAST</a></li>
''')
        write(u'''    
''')
        if VFFSL(SL,"page_type",True) == 'help': # generated from line 80, col 5
            write(u'''        <li><span><a href="/help">Help</a></span></li>
''')
        else: # generated from line 82, col 5
            write(u'''        <li><a href="/help">Help</a></li>
''')
        if VFFSL(SL,"page_type",True) == 'about': # generated from line 85, col 5
            write(u'''        <li><span><a href="/about">About Us</a></span></li>
''')
        else: # generated from line 87, col 5
            write(u'''        <li><a href="/about">About Us</a></li>
''')
        write(u'''    </ul>
    </div>
    <div id="main">
        <div id="contents">
        
''')
        if VFFSL(SL,"page_type",True) == 'home': # generated from line 95, col 1
            write(u'''\t\t\t<h2>Welcome to miSolRNA</h2>\t\t\t
\t\t\t<p class="note">.</p>
\t\t\t<p>Tomato offers one of the best model systems for fleshy fruit development and ripening studies. A vast source of genomic information together with fruit metabolism studies has been recently released and allows us to build a relational database. The database is normalized and groups 6 tables holding information about <a href="http://www.sgn.cornell.edu/">map position</a> of predicted <a href="http://asrp.cgrb.oregonstate.edu/">miRNA</a> target genes, their <a href="http://www.ncbi.nlm.nih.gov/pubmed/17071647?ordinalpos=5&amp;itool=EntrezSystem2.PEntrez.Pubmed.Pubmed_ResultsPanel.Pubmed_RVDocSum">expression patterns</a> and co-localization with <a href="http://www.ncbi.nlm.nih.gov/pubmed/16531992?ordinalpos=15&itool=EntrezSystem2.PEntrez.Pubmed.Pubmed_ResultsPanel.Pubmed_RVDocSum">previously identified fruit metabolic QTLs</a>. Relations within the whole data set were established by means of the following fields: miRNA name, target name, target position and genetic BINs.</p>
\t\t\t<p>miRNA data is collected from peer-reviewed published articles. Data extraction and conversion was done using Python scripts. The database is accessible via a web interface that contains several features such as a simple search by genetic BIN, miRNA, Name, keywords, browsing, bulk data downloading and help. The database is licensed under General Public License (GPL). Currently there are over 57 entries for miRNAs.</p>
\t\t\t<p>The fast growing set of genomic data along side with newly discovered
sRNAs and miRNAs found in different plant species will allow us
periodically update this DB with new relations; we provide a RSS feed
to keep updated all interested users. We will also very much
appreciate your feedback comments and suggestions.</p>
\t\t\t\t\t</div>

<div id="dere">
 <p style="text-align:right;">
    <a href="http://validator.w3.org/check?uri=referer"><img
        src="http://www.w3.org/Icons/valid-xhtml10"
        alt="Valid XHTML 1.0 Strict" height="31" width="88"
        style="border:solid 0px black;" /></a>

<a href="rss.xml"> 
<img src="''')
            _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 115, col 11
            if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 115, col 11.
            write(u'''/rss_icon.png" alt="RSS logo" style="border:solid 0px black;" />
</a></p>
  
''')
        elif VFFSL(SL,"page_type",True) == 'search': # generated from line 118, col 1
            write(u'''
<h1>Select a search:</h1>
<br />

<input type="radio" rel="bin" name="mselector" value="bin" id="bincb" onclick="mostrarsolo1(\'searchbin\');" /><a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,\'Delimited chromosome fraction on the genetic map of the S. pennellii introgression lines population\');return false" onclick="mostrarsolo1(\'searchbin\');document.getElementById(\'bincb\').checked = \'true\';">Bin</a>

    <br />
<input type="radio" rel="mirna" name="mselector" value="mirna" id="mirnacb" onclick="mostrarsolo1(\'searchmicro\');" /><a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,\'Name of the plant microRNA\');return false" onclick="mostrarsolo1(\'searchmicro\');document.getElementById(\'mirnacb\').checked = \'true\';">miRNA</a>
    <br />  
<input type="radio" rel="target" name="mselector" value="target" id="targetcb" onclick="mostrarsolo1(\'searchtarget\');" /><a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,\'Putative target name; could be a Bacterial Artificial Chromosome (BAC) anchored to the tomato genome or an Unigene (<a href=\\\'http://www.sgn.cornell.edu\\\'>SGN</a>)\');return false" onclick="mostrarsolo1(\'searchtarget\');document.getElementById(\'targetcb\').checked = \'true\';">Target</a>
    <br />
<input type="radio" rel="keyword" name="mselector" value="keyword" id="keywordcb" onclick="mostrarsolo1(\'searchkey\');" /><a href="#" onmouseout="hideTooltip()" onmouseover="showTooltip(event,\'Search by keyword in fields: QTL and/or Metabolites and/or Hit Definition.\');return false" onclick="mostrarsolo1(\'searchkey\');document.getElementById(\'keywordcb\').checked = \'true\';">Keyword</a>



<div ID="searchbin">
<h2>Search by Bin</h2> 
<p class="note">Select a bin from the drop-down menu.</p> 
<form action="binResult" method="post"> 
  Bin Number : <select name="bin">
''')
            self._handleCheetahInclude("/var/www/misolrna.org/htdocs/binlist.template", trans=trans, includeFrom="file", raw=False)
            write(u'''</select> <br /> 
''')
            _v = VFFSL(SL,"displayopts",True) # u'$displayopts' on line 141, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$displayopts')) # from line 141, col 1.
            write(u'''

<div ID="searchmicro">
<h2>Search by Micro</h2> 
<p class="note">Select a micro from the drop-down menu.</p> 
<form action="microResult" method="post"> 
  Micro code: <select name="micro_val">
''')
            self._handleCheetahInclude("/var/www/misolrna.org/htdocs/microlist.template", trans=trans, includeFrom="file", raw=False)
            write(u'''</select> <br /> 
''')
            _v = VFFSL(SL,"displayopts",True) # u'$displayopts' on line 150, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$displayopts')) # from line 150, col 1.
            write(u'''

<div ID="searchtarget">
<h2>Search by Target</h2> 
<p class="note">Enter a target name like "SGN-U566117", "C02SLe0022J22.1" (without  quotes).</p> 
<form action="targetResult" method="post">

<label for="myInput">Target name:</label> 
<div id="myAutoComplete"> 
\t<input name="target_val" id="myInput" type="text"> 
\t<div id="myContainer"></div> 
</div> 
<script type="text/javascript" src="''')
            _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 162, col 37
            if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 162, col 37.
            write(u'''/data3.js"></script> 

 <br />
''')
            _v = VFFSL(SL,"displayopts",True) # u'$displayopts' on line 165, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$displayopts')) # from line 165, col 1.
            write(u'''

<div ID="searchkey">
<h2>Search by Keyword</h2> 
<p class="note">Enter a keyword like "copper", "resistance" (without  quotes).</p> 
  <form action="keywordResult" method="post"> 
  Keyword to search : <input name="searchkey" type="text" value="" size=30 /> 
<br/>
Fields to search:<br /> 
  <input name="qtl_s" type="checkbox" checked /> 
    QTL <input name="meta_s" type="checkbox" checked /> Metabolites <input name="hitdef_s" type="checkbox" checked /> 
    Hit Definition<br /> 
<br /> 
''')
            k = VFFSL(SL,"displayopts",True)
            k = VFFSL(SL,"k",True)[:VFN(VFFSL(SL,"k",True),"index",False)('<input name="xls"')] + VFFSL(SL,"k",True)[VFN(VFFSL(SL,"k",True),"index",False)('<input type="reset"'):]
            _v = VFFSL(SL,"k",True) # u'$k' on line 180, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$k')) # from line 180, col 1.
            write(u'''


''')
        elif VFFSL(SL,"page_type",True) == 'blast': # generated from line 183, col 1
            write(u'''

<div id="MainBlastForm">
<form name="MainBlastForm" id="blastform">
Enter sequence below in FASTA format 
<BR> 
<textarea name="SEQUENCE" rows=6 cols=60 id="example">&#062;Sequence Name
cagtgcagtcagctatgcgagtcagtcatcgaactcacgactcacggcatgcat
cgagcaacagcttagcattagccgaatgtcggctacgccgtacgtagtctatag</textarea>

<p></p>

Expect
<select name="EXPECT" id="expect"> 
    <option>0.0001</option>
    <option>0.001</option>
    <option>0.01</option>
    <option>1</option>
    <option selected>10</option> 
    <option>100</option>
    <option>1000</option>
</select> 

Database
<select name="DB" id="db"> 
    <option selected value = "micro">Micros</option> 
    <option value = "target">Targets</option> 
    <option value = "precus">Precursors</option> 
</select> 

<INPUT TYPE="submit" VALUE="Search" id="submitir"> 
</FORM> 
</div>

<div id="ajaxblastres"></div>

''')
        elif VFFSL(SL,"page_type",True) == 'blastresult': # generated from line 220, col 1
            write(u'''
<h2>Blast result</h2>

<p></p>
''')
            if VFFSL(SL,"lblast",True): # generated from line 225, col 1
                write(u'''<table border="1">
<tr><th>
''')
                if VFFSL(SL,"db",True)=='micro': # generated from line 228, col 1
                    write(u'''Micro
''')
                elif VFFSL(SL,"db",True)=='target': # generated from line 230, col 1
                    write(u'''Target
''')
                elif VFFSL(SL,"db",True)=='precus': # generated from line 232, col 1
                    write(u'''Precursor
''')
                write(u'''</th><th>E val</th><th>Score</th></tr>

''')
                for bdata in VFFSL(SL,"lblast",True): # generated from line 237, col 1
                    write(u'''<tr><td>
''')
                    if VFFSL(SL,"db",True)=='micro': # generated from line 239, col 1
                        write(u'''<a href="''')
                        _v = VFFSL(SL,"url",True) # u'$url' on line 240, col 10
                        if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 240, col 10.
                        write(u'''/microResult/''')
                        _v = VFFSL(SL,"bdata",True)[0] # u'$bdata[0]' on line 240, col 27
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[0]')) # from line 240, col 27.
                        write(u'''">''')
                        _v = VFFSL(SL,"bdata",True)[0] # u'$bdata[0]' on line 240, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[0]')) # from line 240, col 38.
                        write(u'''</a></td><td>''')
                        _v = VFFSL(SL,"bdata",True)[1] # u'$bdata[1]' on line 240, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[1]')) # from line 240, col 60.
                        write(u'''</td><td>''')
                        _v = VFFSL(SL,"bdata",True)[2] # u'$bdata[2]' on line 240, col 78
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[2]')) # from line 240, col 78.
                        write(u'''
''')
                    elif VFFSL(SL,"db",True)=='target': # generated from line 241, col 1
                        write(u'''<a href="''')
                        _v = VFFSL(SL,"url",True) # u'$url' on line 242, col 10
                        if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 242, col 10.
                        write(u'''/targetResult/''')
                        _v = VFN(VFFSL(SL,"bdata",True)[0],"split",False)(' ')[0] # u"${bdata[0].split(' ')[0]}" on line 242, col 28
                        if _v is not None: write(_filter(_v, rawExpr=u"${bdata[0].split(' ')[0]}")) # from line 242, col 28.
                        write(u'''">''')
                        _v = VFN(VFFSL(SL,"bdata",True)[0],"split",False)(' ')[0] # u"${bdata[0].split(' ')[0]}" on line 242, col 55
                        if _v is not None: write(_filter(_v, rawExpr=u"${bdata[0].split(' ')[0]}")) # from line 242, col 55.
                        write(u'''</a></td><td>''')
                        _v = VFFSL(SL,"bdata",True)[1] # u'$bdata[1]' on line 242, col 93
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[1]')) # from line 242, col 93.
                        write(u'''</td><td>''')
                        _v = VFFSL(SL,"bdata",True)[2] # u'$bdata[2]' on line 242, col 111
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[2]')) # from line 242, col 111.
                        write(u'''
''')
                    elif VFFSL(SL,"db",True)=='precus': # generated from line 243, col 1
                        write(u'''<a href="''')
                        _v = VFFSL(SL,"url",True) # u'$url' on line 244, col 10
                        if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 244, col 10.
                        write(u'''/microResult/''')
                        _v = VFFSL(SL,"bdata",True)[0] # u'$bdata[0]' on line 244, col 27
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[0]')) # from line 244, col 27.
                        write(u'''">''')
                        _v = VFFSL(SL,"bdata",True)[0] # u'$bdata[0]' on line 244, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[0]')) # from line 244, col 38.
                        write(u'''</a></td><td>''')
                        _v = VFFSL(SL,"bdata",True)[1] # u'$bdata[1]' on line 244, col 60
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[1]')) # from line 244, col 60.
                        write(u'''</td><td>''')
                        _v = VFFSL(SL,"bdata",True)[2] # u'$bdata[2]' on line 244, col 78
                        if _v is not None: write(_filter(_v, rawExpr=u'$bdata[2]')) # from line 244, col 78.
                        write(u'''
''')
                    write(u'''</td></tr>
''')
                write(u'''

</table>
''')
            else: # generated from line 251, col 1
                write(u'''No results found
''')
            write(u'''
<p>Command line:</p> 
''')
            _v = VFFSL(SL,"cl",True) # u'$cl' on line 256, col 1
            if _v is not None: write(_filter(_v, rawExpr=u'$cl')) # from line 256, col 1.
            write(u''' <br/>

<p>Program used:</p>
BLAST 2.2.23 release (BMC Bioinformatics 2009, 10:421 doi:10.1186/1471-2105-10-421)<br/>


''')
        elif VFFSL(SL,"page_type",True) == 'binResult': # generated from line 262, col 1
            write(u'''<a name="top"></a>
<p>
<h1>Results for BIN: <result>''')
            _v = VFFSL(SL,"bin",True) # u'$bin' on line 265, col 30
            if _v is not None: write(_filter(_v, rawExpr=u'$bin')) # from line 265, col 30.
            write(u'''</result></h1>
</p>


<hr/>

''')
            if VFFSL(SL,"metab",True): # generated from line 271, col 1
                write(u'''<h2>Target Genetic Map Location</h2>
<table border=1>
<tr><th>bin name</th><th>Metabolite (QML)</th><th>QTL</th></tr>
<tr><td>''')
                _v = VFFSL(SL,"markers2",True)[0] # u'$markers2[0]' on line 275, col 9
                if _v is not None: write(_filter(_v, rawExpr=u'$markers2[0]')) # from line 275, col 9.
                write(u'''</td><td>''')
                _v = VFFSL(SL,"markers2",True)[1] # u'$markers2[1]' on line 275, col 30
                if _v is not None: write(_filter(_v, rawExpr=u'$markers2[1]')) # from line 275, col 30.
                write(u'''</td><td>''')
                _v = VFFSL(SL,"markers2",True)[2] # u'$markers2[2]' on line 275, col 51
                if _v is not None: write(_filter(_v, rawExpr=u'$markers2[2]')) # from line 275, col 51.
                write(u'''</td></tr>
</table>
<hr/>
''')
            write(u'''
''')
            if len(VFFSL(SL,"miranda_ss",True))>=2: # generated from line 280, col 1
                write(u'''<h2>Predicted targets</h2>
''')
            else: # generated from line 282, col 1
                write(u'''<h2>Predicted target</h2>
''')
            write(u'''<p></p>


''')
            for m in VFFSL(SL,"miranda_ss",True): # generated from line 288, col 1
                target = VFFSL(SL,"m",True)[2]
                write(u'''<table border=1 width="80%">

<tr><th>Micro name</th><td><a href="''')
                _v = VFFSL(SL,"url",True) # u'$url' on line 292, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 292, col 37.
                write(u'''/microResult/''')
                _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 292, col 54
                if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 292, col 54.
                write(u'''">''')
                _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 292, col 61
                if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 292, col 61.
                write(u'''</a></td></tr>
<tr><th>Target name</th><td><a href="''')
                _v = VFFSL(SL,"url",True) # u'$url' on line 293, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 293, col 38.
                write(u'''/targetResult/''')
                _v = VFFSL(SL,"m",True)[2] # u'$m[2]' on line 293, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'$m[2]')) # from line 293, col 56.
                write(u'''">''')
                _v = VFFSL(SL,"m",True)[2] # u'$m[2]' on line 293, col 63
                if _v is not None: write(_filter(_v, rawExpr=u'$m[2]')) # from line 293, col 63.
                write(u'''</a></td></tr>
<tr><th>Micro position</th><td>''')
                _v = VFFSL(SL,"m",True)[3] # u'$m[3]' on line 294, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$m[3]')) # from line 294, col 32.
                write(u''' to ''')
                _v = VFFSL(SL,"m",True)[4] # u'$m[4]' on line 294, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$m[4]')) # from line 294, col 41.
                write(u'''</td></tr>
''')
                if VFFSL(SL,"fromto",True): # generated from line 295, col 1
                    write(u'''<tr><th>Target position</th><td>''')
                    _v = VFFSL(SL,"m",True)[5] # u'$m[5]' on line 296, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[5]')) # from line 296, col 33.
                    write(u''' to ''')
                    _v = VFFSL(SL,"m",True)[6] # u'$m[6]' on line 296, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[6]')) # from line 296, col 42.
                    write(u'''</td></tr>
''')
                if VFFSL(SL,"C_alig",True): # generated from line 298, col 1
                    write(u'''<tr><th>Alignment</th><td><img src="''')
                    _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 299, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 299, col 37.
                    write(u'''/aligns/align-''')
                    _v = VFFSL(SL,"m",True)[0] # u'${m[0]}' on line 299, col 58
                    if _v is not None: write(_filter(_v, rawExpr=u'${m[0]}')) # from line 299, col 58.
                    write(u'''.png" width=500 height=80 alt="alignment" /></td></tr>
''')
                write(u'''<tr><th colspan="2">Gene annotation</th></tr>
<tr><th>Augustus gene prediction</th>
<td>
''')
                if VFFSL(SL,"m",True)[12]==1: # generated from line 304, col 1
                    write(u'''Yes
''')
                else: # generated from line 306, col 1
                    write(u'''No
''')
                write(u'''</td></tr>
<tr><th>Genome threather vs SGN unigenes supporting alignment</th>
<td>
''')
                if VFFSL(SL,"m",True)[14]: # generated from line 312, col 1
                    _v = VFFSL(SL,"m",True)[14] # u'$m[14]' on line 313, col 1
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[14]')) # from line 313, col 1.
                    write(u'''
''')
                else: # generated from line 314, col 1
                    write(u'''N/A
''')
                write(u'''</td>
</tr>
''')
                if VFFSL(SL,"C_hitDef",True): # generated from line 319, col 1
                    write(u'''<tr><th>Arabidopsis peptide alignment (Blast x)</th>
<td>
''')
                    if VFFSL(SL,"m",True)[13]: # generated from line 322, col 1
                        _v = VFFSL(SL,"m",True)[13] # u'$m[13]' on line 323, col 1
                        if _v is not None: write(_filter(_v, rawExpr=u'$m[13]')) # from line 323, col 1.
                        write(u'''
''')
                    else: # generated from line 324, col 1
                        write(u'''N/A
''')
                    write(u'''</td>
</tr>
''')
                    if VFN(VFFSL(SL,"target",True),"startswith",False)('SGN-'): # generated from line 329, col 1
                        write(u'''<tr><th>SGN Unigene annotation</th>
<td>
''')
                        if VFFSL(SL,"m",True)[15]: # generated from line 332, col 1
                            _v = VFFSL(SL,"m",True)[15] # u'$m[15]' on line 333, col 1
                            if _v is not None: write(_filter(_v, rawExpr=u'$m[15]')) # from line 333, col 1.
                            write(u'''
''')
                        else: # generated from line 334, col 1
                            write(u'''No significant hits detected for this target or not run.
''')
                        write(u'''</td></tr>
''')
                    else: # generated from line 338, col 1
                        write(u'''<tr><th>MicroRNA precursor alignment</th><td>
''')
                        if VFFSL(SL,"m",True)[0] in VFFSL(SL,"queryname",True): # generated from line 340, col 1
                            for q in VFFSL(SL,"queryname",True)[VFFSL(SL,"m",True)[0]]: # generated from line 341, col 1
                                write(u'''<p>
''')
                                #  m0 y q: $m[0] $q 
                                write(u'''Putative function precursor 
''')
                                if VFFSL(SL,"numero",True) == 0: # generated from line 345, col 1
                                    _v = VFFSL(SL,"q",True)[5] # u'$q[5]' on line 346, col 1
                                    if _v is not None: write(_filter(_v, rawExpr=u'$q[5]')) # from line 346, col 1.
                                    write(u'''
''')
                                else: # generated from line 347, col 1
                                    write(u'''<b>ERROR (dato: mirna?)</b>
''')
                                    #  $mirna 
                                write(u'''<br />
parid: ''')
                                _v = VFFSL(SL,"q",True)[0] # u'$q[0]' on line 352, col 8
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[0]')) # from line 352, col 8.
                                write(u'''<br />
e: ''')
                                _v = VFFSL(SL,"q",True)[1] # u'$q[1]' on line 353, col 4
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[1]')) # from line 353, col 4.
                                write(u'''<br />
Ident: ''')
                                _v = VFFSL(SL,"q",True)[2] # u'$q[2]' on line 354, col 8
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[2]')) # from line 354, col 8.
                                write(u'''%<br />
Bit: ''')
                                _v = VFFSL(SL,"q",True)[3] # u'$q[3]' on line 355, col 6
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[3]')) # from line 355, col 6.
                                write(u'''<br />
Alignment: ''')
                                _v = VFFSL(SL,"q",True)[4] # u'$q[4]' on line 356, col 12
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[4]')) # from line 356, col 12.
                                write(u'''<br />
</p>
''')
                        else: # generated from line 359, col 1
                            write(u'''N/A
''')
                        write(u'''</td></tr>
''')
                write(u'''
''')
                if VFFSL(SL,"C_exp",True): # generated from line 366, col 1
                    expname = VFFSL(SL,"m",True)[2] + '.png'
                    if VFFSL(SL,"expname",True) in VFFSL(SL,"expression_s",True): # generated from line 368, col 1
                        write(u'''<tr><td>Expression</td><td><img src="''')
                        _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 369, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 369, col 38.
                        write(u'''/exp/''')
                        _v = VFFSL(SL,"expname",True) # u'${expname}' on line 369, col 50
                        if _v is not None: write(_filter(_v, rawExpr=u'${expname}')) # from line 369, col 50.
                        write(u'''" alt="expression data" /></td></tr>
''')
                write(u'''
</table>
<p>
<hr>
</p>
''')
            write(u'''<hr />

''')
            if VFFSL(SL,"C_xls",True): # generated from line 380, col 1
                write(u'''Excel dump: <a href="''')
                _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 381, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 381, col 22.
                write(u'''/xls/tmpbins/''')
                _v = VFFSL(SL,"bin",True) # u'${bin}' on line 381, col 42
                if _v is not None: write(_filter(_v, rawExpr=u'${bin}')) # from line 381, col 42.
                write(u'''.xls">''')
                _v = VFFSL(SL,"bin",True) # u'$bin' on line 381, col 54
                if _v is not None: write(_filter(_v, rawExpr=u'$bin')) # from line 381, col 54.
                write(u'''</a>
''')
            write(u'''
''')
        elif VFFSL(SL,"page_type",True) == 'microResult': # generated from line 384, col 1
            write(u'''<a name="top"></a>

<p>
<h1>Results for micro: <result>''')
            _v = VFFSL(SL,"mirna",True) # u'$mirna' on line 388, col 32
            if _v is not None: write(_filter(_v, rawExpr=u'$mirna')) # from line 388, col 32.
            write(u'''</result></h1>
</p>

<h2>Publications</h2>

''')
            for pub in VFFSL(SL,"pubs",True): # generated from line 393, col 1
                _v = VFFSL(SL,"pub",True)[0][0][:-1] # u'$pub[0][0][:-1]' on line 394, col 1
                if _v is not None: write(_filter(_v, rawExpr=u'$pub[0][0][:-1]')) # from line 394, col 1.
                write(u''' , ''')
                _v = VFFSL(SL,"pub",True)[0][1] # u'$pub[0][1]' on line 394, col 19
                if _v is not None: write(_filter(_v, rawExpr=u'$pub[0][1]')) # from line 394, col 19.
                write(u''' , ''')
                _v = VFFSL(SL,"pub",True)[0][2] # u'$pub[0][2]' on line 394, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$pub[0][2]')) # from line 394, col 32.
                write(u'''<br/>
''')
                _v = ', '.join(VFFSL(SL,"pub",True)[1]) # u"${', '.join($pub[1])}" on line 395, col 1
                if _v is not None: write(_filter(_v, rawExpr=u"${', '.join($pub[1])}")) # from line 395, col 1.
                write(u'''
<br/>

<br />
''')
            write(u'''
<h2>Precursor Sequence</h2>
<p class="dnaseq">''')
            _v = VFFSL(SL,"seq",True) # u'$seq' on line 402, col 19
            if _v is not None: write(_filter(_v, rawExpr=u'$seq')) # from line 402, col 19.
            write(u'''</p>
<br />
<p>
</p>

''')
            if len(VFFSL(SL,"miranda_ss",True))>=2: # generated from line 407, col 1
                write(u'''<h2>Predicted targets</h2>
''')
            else: # generated from line 409, col 1
                write(u'''<h2>Predicted target</h2>
''')
            write(u'''<p></p>

''')
            for m in VFFSL(SL,"miranda_ss",True): # generated from line 414, col 1
                write(u'''
<table border=1 width="80%">
<tr><th>Target name</th><td><a href="''')
                _v = VFFSL(SL,"url",True) # u'$url' on line 417, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 417, col 38.
                write(u'''/targetResult/''')
                _v = VFFSL(SL,"m",True)[2] # u'$m[2]' on line 417, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'$m[2]')) # from line 417, col 56.
                write(u'''">''')
                _v = VFFSL(SL,"m",True)[2] # u'$m[2]' on line 417, col 63
                if _v is not None: write(_filter(_v, rawExpr=u'$m[2]')) # from line 417, col 63.
                write(u'''</a></td></tr>
<tr><th>Micro position</th><td>''')
                _v = VFFSL(SL,"m",True)[3] # u'$m[3]' on line 418, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$m[3]')) # from line 418, col 32.
                write(u''' to ''')
                _v = VFFSL(SL,"m",True)[4] # u'$m[4]' on line 418, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$m[4]')) # from line 418, col 41.
                write(u'''</td></tr>
''')
                if VFFSL(SL,"fromto",True): # generated from line 419, col 1
                    write(u'''<tr><th>Target position</th><td>''')
                    _v = VFFSL(SL,"m",True)[5] # u'$m[5]' on line 420, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[5]')) # from line 420, col 33.
                    write(u''' to ''')
                    _v = VFFSL(SL,"m",True)[6] # u'$m[6]' on line 420, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[6]')) # from line 420, col 42.
                    write(u'''</td></tr>
''')
                write(u'''
''')
                if VFFSL(SL,"C_alig",True): # generated from line 423, col 1
                    write(u'''<tr><th>Alignment</th><td><img src="''')
                    _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 424, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 424, col 37.
                    write(u'''/aligns/align-''')
                    _v = VFFSL(SL,"m",True)[0] # u'${m[0]}' on line 424, col 58
                    if _v is not None: write(_filter(_v, rawExpr=u'${m[0]}')) # from line 424, col 58.
                    write(u'''.png" width=500 height=80 alt="alignment" /></td></tr>
''')
                write(u'''
''')
                if VFFSL(SL,"C_hitDef",True): # generated from line 427, col 1
                    write(u'''<tr><th colspan="2">Gene annotation</th></tr>
<tr><th>Augustus gene prediction</th>
<td>
''')
                    if VFFSL(SL,"m",True)[12]==1: # generated from line 431, col 1
                        write(u'''Yes
''')
                    else: # generated from line 433, col 1
                        write(u'''No
''')
                    write(u'''</td></tr>
<tr><th>Genome threather vs SGN unigenes supporting alignment</th>
<td>
''')
                    if VFFSL(SL,"m",True)[14]: # generated from line 439, col 1
                        _v = VFFSL(SL,"m",True)[14] # u'$m[14]' on line 440, col 1
                        if _v is not None: write(_filter(_v, rawExpr=u'$m[14]')) # from line 440, col 1.
                        write(u'''
''')
                    else: # generated from line 441, col 1
                        write(u'''N/A
''')
                    write(u'''</td>
</tr>
<tr><th>Arabidopsis peptide alignment (Blast x)</th>
<td>
''')
                    if VFFSL(SL,"m",True)[13]: # generated from line 448, col 1
                        _v = VFFSL(SL,"m",True)[13] # u'$m[13]' on line 449, col 1
                        if _v is not None: write(_filter(_v, rawExpr=u'$m[13]')) # from line 449, col 1.
                        write(u'''
''')
                    else: # generated from line 450, col 1
                        write(u'''N/A
''')
                    write(u'''</td>
</tr>
''')
                    if VFN(VFFSL(SL,"m",True)[2],"startswith",False)('SGN-'): # generated from line 455, col 1
                        write(u'''<tr><th>SGN Unigene annotation</th>
<td>
''')
                        if VFFSL(SL,"m",True)[15]: # generated from line 458, col 1
                            _v = VFFSL(SL,"m",True)[15] # u'$m[15]' on line 459, col 1
                            if _v is not None: write(_filter(_v, rawExpr=u'$m[15]')) # from line 459, col 1.
                            write(u'''
''')
                        else: # generated from line 460, col 1
                            write(u'''No significant hits detected for this target or not run.
''')
                        write(u'''</td></tr>
''')
                    else: # generated from line 464, col 1
                        write(u'''<tr><th>MicroRNA precursor alignment</th><td>
''')
                        if VFFSL(SL,"m",True)[0] in VFFSL(SL,"queryname",True): # generated from line 466, col 1
                            for q in VFFSL(SL,"queryname",True)[VFFSL(SL,"m",True)[0]]: # generated from line 467, col 1
                                write(u'''<p>
''')
                                #  m0 y q: $m[0] $q 
                                write(u'''Putative function precursor 
''')
                                if VFFSL(SL,"numero",True) == 0: # generated from line 471, col 1
                                    _v = VFFSL(SL,"q",True)[5] # u'$q[5]' on line 472, col 1
                                    if _v is not None: write(_filter(_v, rawExpr=u'$q[5]')) # from line 472, col 1.
                                    write(u'''
''')
                                else: # generated from line 473, col 1
                                    _v = VFFSL(SL,"mirna",True) # u'$mirna' on line 474, col 1
                                    if _v is not None: write(_filter(_v, rawExpr=u'$mirna')) # from line 474, col 1.
                                    write(u'''
''')
                                write(u'''<br />
parid: ''')
                                _v = VFFSL(SL,"q",True)[0] # u'$q[0]' on line 477, col 8
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[0]')) # from line 477, col 8.
                                write(u'''<br />
e: ''')
                                _v = VFFSL(SL,"q",True)[1] # u'$q[1]' on line 478, col 4
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[1]')) # from line 478, col 4.
                                write(u'''<br />
ident: ''')
                                _v = VFFSL(SL,"q",True)[2] # u'$q[2]' on line 479, col 8
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[2]')) # from line 479, col 8.
                                write(u'''%<br />
bit: ''')
                                _v = VFFSL(SL,"q",True)[3] # u'$q[3]' on line 480, col 6
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[3]')) # from line 480, col 6.
                                write(u'''<br />
seq: ''')
                                _v = VFFSL(SL,"q",True)[4] # u'$q[4]' on line 481, col 6
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[4]')) # from line 481, col 6.
                                write(u'''<br />
</p>
''')
                        else: # generated from line 484, col 1
                            write(u'''N/A
''')
                        write(u'''</td></tr>
''')
                    write(u'''
''')
                if VFFSL(SL,"C_exp",True): # generated from line 491, col 1
                    expname = VFFSL(SL,"m",True)[2] + '.png'
                    if VFFSL(SL,"expname",True) in VFFSL(SL,"expression_s",True): # generated from line 493, col 1
                        write(u'''<tr><th>Expression</th><td><img src="''')
                        _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 494, col 38
                        if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 494, col 38.
                        write(u'''/exp/''')
                        _v = VFFSL(SL,"expname",True) # u'${expname}' on line 494, col 50
                        if _v is not None: write(_filter(_v, rawExpr=u'${expname}')) # from line 494, col 50.
                        write(u'''" alt="expression data" /></td></tr>
''')
                if VFFSL(SL,"metab",True): # generated from line 497, col 1
                    write(u'''<tr><th colspan="2">Target genetic Map Location</th></tr>
<tr><th>bin name</th><td>

''')
                    if VFFSL(SL,"m",True)[2] not in VFFSL(SL,"markers2",True): # generated from line 501, col 1
                        write(u'''N/A</td></tr>
<tr><th>Metabolite (QML)</th><td>N/A</td></tr>
<tr><th>QTL</th><td>N/A</td></tr>
''')
                    else: # generated from line 505, col 1
                        write(u'''<a href="''')
                        _v = VFFSL(SL,"url",True) # u'$url' on line 506, col 10
                        if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 506, col 10.
                        write(u'''/binResult/''')
                        _v = VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][0] # u'$markers2[$m[2]][0]' on line 506, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'$markers2[$m[2]][0]')) # from line 506, col 25.
                        write(u'''">''')
                        _v = VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][0] # u'$markers2[$m[2]][0]' on line 506, col 46
                        if _v is not None: write(_filter(_v, rawExpr=u'$markers2[$m[2]][0]')) # from line 506, col 46.
                        write(u'''</a></td></tr>
<tr><th>Metabolite (QML)</th><td>''')
                        _v = VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][1] # u'$markers2[$m[2]][1]' on line 507, col 34
                        if _v is not None: write(_filter(_v, rawExpr=u'$markers2[$m[2]][1]')) # from line 507, col 34.
                        write(u'''</td></tr>
<tr><th>QTL</th><td>''')
                        _v = VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][2] # u'$markers2[$m[2]][2]' on line 508, col 21
                        if _v is not None: write(_filter(_v, rawExpr=u'$markers2[$m[2]][2]')) # from line 508, col 21.
                        write(u'''</td></tr>
''')
                    write(u'''
''')
                write(u'''
</table>
<p>
<hr>
</p>
''')
            write(u'''
''')
            if VFFSL(SL,"C_xls",True): # generated from line 519, col 1
                write(u'''Excel dump: <a href="''')
                _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 520, col 22
                if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 520, col 22.
                write(u'''/xls/tmpmicro/''')
                _v = VFFSL(SL,"mirna",True) # u'${mirna}' on line 520, col 43
                if _v is not None: write(_filter(_v, rawExpr=u'${mirna}')) # from line 520, col 43.
                write(u'''.xls">''')
                _v = VFFSL(SL,"mirna",True) # u'$mirna' on line 520, col 57
                if _v is not None: write(_filter(_v, rawExpr=u'$mirna')) # from line 520, col 57.
                write(u'''</a>
''')
            write(u'''

<hr />

''')
        elif VFFSL(SL,"page_type",True) == 'help': # generated from line 526, col 1
            write(u'''            <h2>Help</h2>            



<p>
The \u201csearch tab\u201d allows to explore the database using different queries: <strong>BIN</strong> 
(e.g. \u201c1A\u201d following the tomato genome dissection proposed by Eshed and Zamir, 
Euphytica 79: 175-179, 1994), <strong>miRNA name</strong> (e.g. \u201cath-MIR1456a\u201d as 
proposed at the miRBASE <a href="http://www.mirbase.org">www.mirbase.org</a> ), 
<strong>Target</strong> gene (UNIGENE e.g. \u201cSGN-U562666\u201d or BAC e.g. \u201cC00HBa0008K08.1\u201d following the 
SGN nomenclature) or <strong>Keyword/s</strong> which will search using all alpha-numerical fields within the 
three selectable database fields: <strong>QTL</strong> names (metabolic and yield associated 
traits as defined by Schauer et al, Nature Biotechnology 24: 447-454, 2006), <strong>Metabolites</strong> 
names or <strong>Hit Definition</strong> that indicates target genes associated 
function ( e.g. a keyword like "copper", \u201cglucose\u201d, "resistance" -without quotes- respectively).
</p><p>
Bottom panel allows choosing how (and which) results will be displayed; QTL, 
target map position onto the Tomato EXPEN2000 genetic map (<a href="http://solgenomics.net">solgenomics.net</a>), 
hit definition (gene annotation), alignment (between the mature miRNA and 
the predicted target) and target expression profile along tomato fruit development 
and ripening (Carrari et al, Plant Physiology 142:1380-1396, 2006).
</p><p>
BLAST tab allows searching the miSolRNA database by query sequences of user 
interest of precursors and mature miRNAs, or target genes (UNIGENES and/or BACs). 
The search may take a couple of minutes. Results can be retrieved in table formats.
</p><p>
Result pages display links to target UNIGENES, genomic clones (BAC and/or COS) 
and related publications to miRNAs.
</p>




''')
        elif VFFSL(SL,"page_type",True) == 'targetResult': # generated from line 560, col 1
            write(u'''<a name="top"></a>

<p>
<h1>Results for target: <result>''')
            _v = VFFSL(SL,"target",True) # u'$target' on line 564, col 33
            if _v is not None: write(_filter(_v, rawExpr=u'$target')) # from line 564, col 33.
            write(u'''</result></h1>
</p>

''')
            #  Si es SGN, poner el bac container 
            if VFN(VFFSL(SL,"target",True),"startswith",False)('SGN-'): # generated from line 568, col 1
                write(u'''<h2>BAC holding Unigene: ''')
                _v = VFFSL(SL,"bac_from_u",True) # u'$bac_from_u' on line 569, col 26
                if _v is not None: write(_filter(_v, rawExpr=u'$bac_from_u')) # from line 569, col 26.
                write(u'''</h2>
''')
            write(u'''
<h2>Markers</h2>

<table border=1>
<tr><th>Name</th><th>Map</th><th>Chromosome</th><th>Position</th></tr>
''')
            if VFFSL(SL,"markers",True): # generated from line 576, col 1
                for m in VFFSL(SL,"markers",True): # generated from line 577, col 1
                    write(u'''<tr><td>''')
                    _v = VFFSL(SL,"m",True)[0] # u'$m[0]' on line 578, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[0]')) # from line 578, col 9.
                    write(u'''</td><td>''')
                    _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 578, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 578, col 23.
                    write(u'''</td><td>''')
                    _v = VFFSL(SL,"m",True)[2] # u'$m[2]' on line 578, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[2]')) # from line 578, col 37.
                    write(u'''</td><td>''')
                    _v = VFFSL(SL,"m",True)[3] # u'$m[3]' on line 578, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[3]')) # from line 578, col 51.
                    write(u'''</td></tr>
''')
            else: # generated from line 580, col 1
                write(u'''<tr><td>N/A</td><td>N/A</td><td>N/A</td><td>N/A</td></tr>
''')
            write(u'''</table>


<hr/>


''')
            if VFFSL(SL,"metab",True): # generated from line 589, col 1
                write(u'''<h2>Target Genetic Map Location</h2>
<table border=1>
<tr><th>bin name</th><th>Metabolite (QML)</th><th>QTL</th></tr>
''')
                if not VFFSL(SL,"markers2",True): # generated from line 593, col 1
                    write(u'''<tr><td>N/A</td><td>N/A</td><td>N/A</td></tr>
''')
                else: # generated from line 595, col 1
                    write(u'''<tr><td>''')
                    _v = VFFSL(SL,"markers2",True)[0] # u'$markers2[0]' on line 596, col 9
                    if _v is not None: write(_filter(_v, rawExpr=u'$markers2[0]')) # from line 596, col 9.
                    write(u'''</td><td>''')
                    _v = VFFSL(SL,"markers2",True)[1] # u'$markers2[1]' on line 596, col 30
                    if _v is not None: write(_filter(_v, rawExpr=u'$markers2[1]')) # from line 596, col 30.
                    write(u'''</td><td>''')
                    _v = VFFSL(SL,"markers2",True)[2] # u'$markers2[2]' on line 596, col 51
                    if _v is not None: write(_filter(_v, rawExpr=u'$markers2[2]')) # from line 596, col 51.
                    write(u'''</td></tr>
''')
                write(u'''</table>
<hr/>
''')
            write(u'''

''')
            if VFFSL(SL,"C_exp",True): # generated from line 603, col 1
                write(u'''<h2>Expression</h2>
''')
                expname = VFFSL(SL,"target",True) + '.png'
                if VFFSL(SL,"expname",True) in VFFSL(SL,"expression_s",True): # generated from line 606, col 1
                    write(u'''<img src="''')
                    _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 607, col 11
                    if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 607, col 11.
                    write(u'''/exp/''')
                    _v = VFFSL(SL,"expname",True) # u'${expname}' on line 607, col 23
                    if _v is not None: write(_filter(_v, rawExpr=u'${expname}')) # from line 607, col 23.
                    write(u'''" alt="expression data" />
''')
                else: # generated from line 608, col 1
                    write(u'''N/A
''')
                write(u'''<hr/>
''')
            write(u'''
''')
            if len(VFFSL(SL,"miranda_ss",True))>=2: # generated from line 614, col 1
                write(u'''<h2>Predicted targets</h2>
''')
            else: # generated from line 616, col 1
                write(u'''<h2>Predicted target</h2>
''')
            write(u'''<p></p>


''')
            for m in VFFSL(SL,"miranda_ss",True): # generated from line 622, col 1
                write(u'''<table border=1 width="80%">
<tr><th>miRNA</th><td><a href="''')
                _v = VFFSL(SL,"url",True) # u'$url' on line 624, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 624, col 32.
                write(u'''/microResult/''')
                _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 624, col 49
                if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 624, col 49.
                write(u'''">''')
                _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 624, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 624, col 56.
                write(u'''</a></td></tr>
<tr><th>Micro position</th><td>''')
                _v = VFFSL(SL,"m",True)[3] # u'$m[3]' on line 625, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$m[3]')) # from line 625, col 32.
                write(u''' to ''')
                _v = VFFSL(SL,"m",True)[4] # u'$m[4]' on line 625, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$m[4]')) # from line 625, col 41.
                write(u'''</td></tr>
''')
                if VFFSL(SL,"fromto",True): # generated from line 626, col 1
                    write(u'''<tr><th>Target position</th><td>''')
                    _v = VFFSL(SL,"m",True)[5] # u'$m[5]' on line 627, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[5]')) # from line 627, col 33.
                    write(u''' to ''')
                    _v = VFFSL(SL,"m",True)[6] # u'$m[6]' on line 627, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[6]')) # from line 627, col 42.
                    write(u'''</td></tr>
''')
                if VFFSL(SL,"C_alig",True): # generated from line 629, col 1
                    write(u'''<tr><th>Alignment</th><td><img src="''')
                    _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 630, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 630, col 37.
                    write(u'''/aligns/align-''')
                    _v = VFFSL(SL,"m",True)[0] # u'${m[0]}' on line 630, col 58
                    if _v is not None: write(_filter(_v, rawExpr=u'${m[0]}')) # from line 630, col 58.
                    write(u'''.png" width=500 height=80 alt="alignment" /></td></tr>
''')
                if VFFSL(SL,"C_hitDef",True): # generated from line 632, col 1
                    write(u'''<tr><th colspan="2">Gene annotation</th></tr>
<tr><th>Augustus gene prediction</th>
<td>
''')
                    if VFFSL(SL,"m",True)[12]==1: # generated from line 636, col 1
                        write(u'''Yes
''')
                    else: # generated from line 638, col 1
                        write(u'''No
''')
                    write(u'''</td></tr>
<tr><th>Genome threather vs SGN unigenes supporting alignment</th>
<td>
''')
                    if VFFSL(SL,"m",True)[14]: # generated from line 644, col 1
                        _v = VFFSL(SL,"m",True)[14] # u'$m[14]' on line 645, col 1
                        if _v is not None: write(_filter(_v, rawExpr=u'$m[14]')) # from line 645, col 1.
                        write(u'''
''')
                    else: # generated from line 646, col 1
                        write(u'''N/A
''')
                    write(u'''</td></tr>
<tr><th>Arabidopsis peptide alignment (Blast x)</th>
<td>
''')
                    if VFFSL(SL,"m",True)[13]: # generated from line 652, col 1
                        _v = VFFSL(SL,"m",True)[13] # u'$m[13]' on line 653, col 1
                        if _v is not None: write(_filter(_v, rawExpr=u'$m[13]')) # from line 653, col 1.
                        write(u'''
''')
                    else: # generated from line 654, col 1
                        write(u'''N/A
''')
                    write(u'''</td></tr>
''')
                    if VFN(VFFSL(SL,"target",True),"startswith",False)('SGN-'): # generated from line 658, col 1
                        write(u'''<tr><th>SGN Unigene annotation</th>
<td>
''')
                        if VFFSL(SL,"m",True)[15]: # generated from line 661, col 1
                            _v = VFFSL(SL,"m",True)[15] # u'$m[15]' on line 662, col 1
                            if _v is not None: write(_filter(_v, rawExpr=u'$m[15]')) # from line 662, col 1.
                            write(u'''
''')
                        else: # generated from line 663, col 1
                            write(u'''No significant hits detected for this target or not run.
''')
                        write(u'''</td></tr>
''')
                    else: # generated from line 667, col 1
                        write(u'''<tr><th>MicroRNA precursor alignment</th><td>
''')
                        if VFFSL(SL,"m",True)[0] in VFFSL(SL,"queryname",True): # generated from line 669, col 1
                            for q in VFFSL(SL,"queryname",True)[VFFSL(SL,"m",True)[0]]: # generated from line 670, col 1
                                write(u'''<p>
''')
                                #  m0 y q: $m[0] $q 
                                write(u'''Putative function precursor 
''')
                                if VFFSL(SL,"numero",True) == 0: # generated from line 674, col 1
                                    _v = VFFSL(SL,"q",True)[5] # u'$q[5]' on line 675, col 1
                                    if _v is not None: write(_filter(_v, rawExpr=u'$q[5]')) # from line 675, col 1.
                                    write(u'''
''')
                                else: # generated from line 676, col 1
                                    #  $mirna 
                                    _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 678, col 1
                                    if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 678, col 1.
                                    write(u'''
''')
                                write(u'''<br />
parid: ''')
                                _v = VFFSL(SL,"q",True)[0] # u'$q[0]' on line 681, col 8
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[0]')) # from line 681, col 8.
                                write(u'''<br />
e: ''')
                                _v = VFFSL(SL,"q",True)[1] # u'$q[1]' on line 682, col 4
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[1]')) # from line 682, col 4.
                                write(u'''<br />
ident: ''')
                                _v = VFFSL(SL,"q",True)[2] # u'$q[2]' on line 683, col 8
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[2]')) # from line 683, col 8.
                                write(u'''%<br />
bit: ''')
                                _v = VFFSL(SL,"q",True)[3] # u'$q[3]' on line 684, col 6
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[3]')) # from line 684, col 6.
                                write(u'''<br />
seq: ''')
                                _v = VFFSL(SL,"q",True)[4] # u'$q[4]' on line 685, col 6
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[4]')) # from line 685, col 6.
                                write(u'''<br />
</p>
''')
                        else: # generated from line 688, col 1
                            write(u'''N/A
''')
                        write(u'''</td></tr>
''')
                write(u'''

''')
                #  esto comentout xq en target tendria q estar once
                # #if $C_exp:
                # #set $expname = $m[2] + '.png'
                # #if $expname in $expression_s:
                # <tr><td>Expression</td><td><img src="$imgurl/exp/${expname}" alt="expression data" /></td></tr>
                # #end if
                # #end if
                write(u'''

</table>
<p>
<hr>
</p>

''')
                if VFFSL(SL,"C_xls",True): # generated from line 711, col 1
                    write(u'''Excel dump: <a href="''')
                    _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 712, col 22
                    if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 712, col 22.
                    write(u'''/xls/tmptarget/''')
                    _v = VFFSL(SL,"target",True) # u'${target}' on line 712, col 44
                    if _v is not None: write(_filter(_v, rawExpr=u'${target}')) # from line 712, col 44.
                    write(u'''.xls">''')
                    _v = VFFSL(SL,"target",True) # u'$target' on line 712, col 59
                    if _v is not None: write(_filter(_v, rawExpr=u'$target')) # from line 712, col 59.
                    write(u'''</a>
''')
                write(u'''

''')
            write(u'''
''')
        elif VFFSL(SL,"page_type",True) == 'keywordResult': # generated from line 718, col 1
            write(u'''
<a name="top"></a>
<p>
<h1>Results for keyword: <result>''')
            _v = VFFSL(SL,"keywords",True) # u'$keywords' on line 722, col 34
            if _v is not None: write(_filter(_v, rawExpr=u'$keywords')) # from line 722, col 34.
            write(u'''<result></h1>
</p>

''')
            if len(VFFSL(SL,"miranda_ss",True))>=2: # generated from line 725, col 1
                write(u'''<h2>Predicted targets</h2>
''')
            else: # generated from line 727, col 1
                write(u'''<h2>Predicted target</h2>
''')
            write(u'''<p></p>

''')
            for m in VFFSL(SL,"miranda_ss",True): # generated from line 732, col 1
                target = VFFSL(SL,"m",True)[2]
                write(u'''<table border=1 width="80%">
<tr><th>Target name</th><td><a href="''')
                _v = VFFSL(SL,"url",True) # u'$url' on line 735, col 38
                if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 735, col 38.
                write(u'''/targetResult/''')
                _v = VFFSL(SL,"m",True)[2] # u'$m[2]' on line 735, col 56
                if _v is not None: write(_filter(_v, rawExpr=u'$m[2]')) # from line 735, col 56.
                write(u'''">''')
                _v = VFFSL(SL,"m",True)[2] # u'$m[2]' on line 735, col 63
                if _v is not None: write(_filter(_v, rawExpr=u'$m[2]')) # from line 735, col 63.
                write(u'''</a></td></tr>
<tr><th>Micro name</th><td><a href="''')
                _v = VFFSL(SL,"url",True) # u'$url' on line 736, col 37
                if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 736, col 37.
                write(u'''/microResult/''')
                _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 736, col 54
                if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 736, col 54.
                write(u'''">''')
                _v = VFFSL(SL,"m",True)[1] # u'$m[1]' on line 736, col 61
                if _v is not None: write(_filter(_v, rawExpr=u'$m[1]')) # from line 736, col 61.
                write(u'''</a></td></tr>
<tr><th>Micro position</th><td>''')
                _v = VFFSL(SL,"m",True)[3] # u'$m[3]' on line 737, col 32
                if _v is not None: write(_filter(_v, rawExpr=u'$m[3]')) # from line 737, col 32.
                write(u''' to ''')
                _v = VFFSL(SL,"m",True)[4] # u'$m[4]' on line 737, col 41
                if _v is not None: write(_filter(_v, rawExpr=u'$m[4]')) # from line 737, col 41.
                write(u'''</td></tr>
''')
                if VFFSL(SL,"fromto",True): # generated from line 738, col 1
                    write(u'''<tr><th>Target position</th><td>''')
                    _v = VFFSL(SL,"m",True)[5] # u'$m[5]' on line 739, col 33
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[5]')) # from line 739, col 33.
                    write(u''' to ''')
                    _v = VFFSL(SL,"m",True)[6] # u'$m[6]' on line 739, col 42
                    if _v is not None: write(_filter(_v, rawExpr=u'$m[6]')) # from line 739, col 42.
                    write(u'''</td></tr>
''')
                write(u'''<tr><th colspan="2">Gene annotation</th></tr>
<tr><th>Augustus gene prediction</th>
<td>
''')
                if VFFSL(SL,"m",True)[12]==1: # generated from line 744, col 1
                    write(u'''Yes
''')
                else: # generated from line 746, col 1
                    write(u'''No
''')
                write(u'''</td></tr>
<tr><th>Genome threather vs SGN unigenes supporting alignment</th>
''')
                if VFFSL(SL,"m",True)[14]: # generated from line 751, col 1
                    destacado = VFN(VFFSL(SL,"m",True)[14],"replace",False)(VFFSL(SL,"keywords",True),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>')
                    write(u'''<td>''')
                    _v = VFFSL(SL,"destacado",True) # u'$destacado' on line 753, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$destacado')) # from line 753, col 5.
                    write(u'''</td></tr>
''')
                else: # generated from line 754, col 1
                    write(u'''<td>N/A</td></tr>
''')
                write(u'''<tr><th>Arabidopsis peptide alignment (Blast x)</th>
''')
                if VFFSL(SL,"m",True)[13]: # generated from line 758, col 1
                    tipo = str(type(VFFSL(SL,"m",True)[13]))
                    # set $destacado = 'xx'
                    destacado = VFN(VFFSL(SL,"m",True)[13],"replace",False)(VFFSL(SL,"keywords",True),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>')
                    write(u'''
<td>''')
                    _v = VFFSL(SL,"destacado",True) # u'$destacado' on line 763, col 5
                    if _v is not None: write(_filter(_v, rawExpr=u'$destacado')) # from line 763, col 5.
                    write(u'''</td></tr>
''')
                else: # generated from line 764, col 1
                    write(u'''<td>N/A</td></tr>
''')
                write(u'''
''')
                if VFN(VFFSL(SL,"target",True),"startswith",False)('SGN-'): # generated from line 768, col 1
                    write(u'''<tr><th>SGN Unigene annotation</th>
<td>
''')
                    if VFFSL(SL,"m",True)[15]: # generated from line 771, col 1
                        #  cambiar esto por REGEX y hacerlo en SGN Unigene annotation.
                        #  re.sub(regex, replacement, subject)
                        destacado = VFN(VFN(VFN(VFFSL(SL,"m",True)[15],"replace",False)(VFFSL(SL,"keywords",True),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>'),"replace",False)(VFN(VFFSL(SL,"keywords",True),"upper",False)(),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>'),"replace",False)(VFN(VFFSL(SL,"keywords",True),"capitalize",False)(),'<b class="dest">'+VFN(VFFSL(SL,"keywords",True),"capitalize",False)()+'</b>')
                        _v = VFFSL(SL,"destacado",True) # u'$destacado' on line 775, col 1
                        if _v is not None: write(_filter(_v, rawExpr=u'$destacado')) # from line 775, col 1.
                        write(u'''
''')
                    else: # generated from line 776, col 1
                        write(u'''No significant hits detected for this target or not run.
''')
                    write(u'''</td></tr>
''')
                else: # generated from line 780, col 1
                    write(u'''<tr><th>MicroRNA precursor alignment</th><td>
''')
                    if VFFSL(SL,"m",True)[0] in VFFSL(SL,"queryname",True): # generated from line 782, col 1
                        for q in VFFSL(SL,"queryname",True)[VFFSL(SL,"m",True)[0]]: # generated from line 783, col 1
                            write(u'''<p>
''')
                            #  m0 y q: $m[0] $q 
                            write(u'''Putative function precursor 
''')
                            if VFFSL(SL,"numero",True) == 0: # generated from line 787, col 1
                                _v = VFFSL(SL,"q",True)[5] # u'$q[5]' on line 788, col 1
                                if _v is not None: write(_filter(_v, rawExpr=u'$q[5]')) # from line 788, col 1.
                                write(u'''
''')
                            else: # generated from line 789, col 1
                                _v = VFFSL(SL,"mirna",True) # u'$mirna' on line 790, col 1
                                if _v is not None: write(_filter(_v, rawExpr=u'$mirna')) # from line 790, col 1.
                                write(u'''
''')
                            write(u'''<br />
parid: ''')
                            _v = VFFSL(SL,"q",True)[0] # u'$q[0]' on line 793, col 8
                            if _v is not None: write(_filter(_v, rawExpr=u'$q[0]')) # from line 793, col 8.
                            write(u'''<br />
E value: ''')
                            _v = VFFSL(SL,"q",True)[1] # u'$q[1]' on line 794, col 10
                            if _v is not None: write(_filter(_v, rawExpr=u'$q[1]')) # from line 794, col 10.
                            write(u'''<br />
Ident: ''')
                            _v = VFFSL(SL,"q",True)[2] # u'$q[2]' on line 795, col 8
                            if _v is not None: write(_filter(_v, rawExpr=u'$q[2]')) # from line 795, col 8.
                            write(u'''%<br />
Bit: ''')
                            _v = VFFSL(SL,"q",True)[3] # u'$q[3]' on line 796, col 6
                            if _v is not None: write(_filter(_v, rawExpr=u'$q[3]')) # from line 796, col 6.
                            write(u'''<br />
Alignment (query/subject): ''')
                            _v = VFFSL(SL,"q",True)[4] # u'$q[4]' on line 797, col 28
                            if _v is not None: write(_filter(_v, rawExpr=u'$q[4]')) # from line 797, col 28.
                            write(u'''<br />
</p>
''')
                    else: # generated from line 800, col 1
                        write(u'''N/A
''')
                    write(u'''</td></tr>
''')
                if VFFSL(SL,"C_alig",True): # generated from line 805, col 1
                    write(u'''<tr><th>Alignment</th><td><img src="''')
                    _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 806, col 37
                    if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 806, col 37.
                    write(u'''/aligns/align-''')
                    _v = VFFSL(SL,"m",True)[0] # u'${m[0]}' on line 806, col 58
                    if _v is not None: write(_filter(_v, rawExpr=u'${m[0]}')) # from line 806, col 58.
                    write(u'''.png" width=500 height=80 alt="alignment" /></td></tr>
''')
                expname = VFFSL(SL,"m",True)[2] + '.png'
                if VFFSL(SL,"expname",True) in VFFSL(SL,"expression_s",True): # generated from line 809, col 1
                    write(u'''<tr><td>Expression</td><td><img src="''')
                    _v = VFFSL(SL,"imgurl",True) # u'$imgurl' on line 810, col 38
                    if _v is not None: write(_filter(_v, rawExpr=u'$imgurl')) # from line 810, col 38.
                    write(u'''/exp/''')
                    _v = VFFSL(SL,"expname",True) # u'${expname}' on line 810, col 50
                    if _v is not None: write(_filter(_v, rawExpr=u'${expname}')) # from line 810, col 50.
                    write(u'''" alt="expression data" /></td></tr>
''')
                write(u'''
''')
                if VFFSL(SL,"metab",True): # generated from line 813, col 1
                    write(u'''<tr><th colspan="2">Target genetic Map Location</th></tr>
<tr><th>bin name</th><td>

''')
                    if VFFSL(SL,"m",True)[2] not in VFFSL(SL,"markers2",True): # generated from line 817, col 1
                        write(u'''N/A</td></tr>
<tr><th>Metabolite (QML)</th><td>N/A</td></tr>
<tr><th>QTL</th><td>N/A</td></tr>
''')
                    else: # generated from line 821, col 1
                        write(u'''<a href="''')
                        _v = VFFSL(SL,"url",True) # u'$url' on line 822, col 10
                        if _v is not None: write(_filter(_v, rawExpr=u'$url')) # from line 822, col 10.
                        write(u'''/binResult/''')
                        _v = VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][0] # u'$markers2[$m[2]][0]' on line 822, col 25
                        if _v is not None: write(_filter(_v, rawExpr=u'$markers2[$m[2]][0]')) # from line 822, col 25.
                        write(u'''">''')
                        _v = VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][0] # u'$markers2[$m[2]][0]' on line 822, col 46
                        if _v is not None: write(_filter(_v, rawExpr=u'$markers2[$m[2]][0]')) # from line 822, col 46.
                        write(u'''</a></td></tr>
<tr><th>Metabolite (QML)</th>
<td>
''')
                        if VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][1]: # generated from line 825, col 1
                            destacado = VFN(VFN(VFN(VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][1],"replace",False)(VFFSL(SL,"keywords",True),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>'),"replace",False)(VFN(VFFSL(SL,"keywords",True),"upper",False)(),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>'),"replace",False)(VFN(VFFSL(SL,"keywords",True),"capitalize",False)(),'<b class="dest">'+VFN(VFFSL(SL,"keywords",True),"capitalize",False)()+'</b>')
                            _v = VFFSL(SL,"destacado",True) # u'$destacado' on line 827, col 1
                            if _v is not None: write(_filter(_v, rawExpr=u'$destacado')) # from line 827, col 1.
                            write(u'''
''')
                        else: # generated from line 828, col 1
                            write(u'''N/A
''')
                        write(u'''</td>
</tr>
<tr><th>QTL</th><td>
''')
                        if VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][2]: # generated from line 834, col 1
                            destacado = VFN(VFN(VFN(VFFSL(SL,"markers2",True)[VFFSL(SL,"m",True)[2]][2],"replace",False)(VFFSL(SL,"keywords",True),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>'),"replace",False)(VFN(VFFSL(SL,"keywords",True),"upper",False)(),'<b class="dest">'+VFFSL(SL,"keywords",True)+'</b>'),"replace",False)(VFN(VFFSL(SL,"keywords",True),"capitalize",False)(),'<b class="dest">'+VFN(VFFSL(SL,"keywords",True),"capitalize",False)()+'</b>')
                            _v = VFFSL(SL,"destacado",True) # u'$destacado' on line 836, col 1
                            if _v is not None: write(_filter(_v, rawExpr=u'$destacado')) # from line 836, col 1.
                            write(u'''
''')
                        else: # generated from line 837, col 1
                            write(u'''N/A
''')
                        write(u'''</td></tr>
''')
                    write(u'''
''')
                write(u'''

</table>
<p>
<hr>
</p>
''')
            write(u'''
''')
        elif VFFSL(SL,"page_type",True) == 'about': # generated from line 852, col 1
            write(u'''
\t<h2>About Us</h2>\t\t\t
     <p>
      MiSolRNA is produced by a multidisciplinary research team formed by groups devoted to research on tomato fruit metabolism , a group working on plants miRNAs and people who shaped concepts into a practical and automatized software tool . Research of the participating groups is supported by <a href="http://www.conicet.gov.ar/">CONICET</a> (Argentina), <a href="http://www.mpg.de/">Max Planck Foundation</a> (Germany), <a href="http://www.agencia.mincyt.gov.ar/">ANPCyT</a> (Argentina), <a href="http://www.inta.gov.ar/">INTA</a> (Argentina) and the <a href="http://www.eu-sol.net/">EU-SOL project</a>. Contact address: <a href="mailto:info@misolrna.org">info@misolrna.org</a>.  
      </p>
    <h2>Participating groups</h2>
         <ul>
       <li><a href="http://www.inta.gov.ar/biotec/investiga/vegetal_gefeia02_en.htm">Structural and Functional Genomics to Solanaceaes Genetic Resources group. - Instituto de Biotecnolog\xeda - INTA - Argentina</a></li>
  <li><a href="http://www.inta.gov.ar/biotec/investiga/vegetal_bmihp01_en.htm">Plant-Virus interaction, molecular mechanism of resistance on model systems - Instituto de Biotecnolog\xeda - INTA - Argentina</a></li>
      <li><a href="http://www-en.mpimp-golm.mpg.de/03-research/researchGroups/01-dept1/Central_Metabolism/index.html">Central Metabolism group - Max Planck Institute of Molecular Plant Physiology - Golm, Germany.</a> </li>
       <li><a href="http://www.fcq.unc.edu.ar/cibici/investigacion/aldao.php">Bromatology and Nutrition group - CIBICI/Biochemical Department - Chemical Sciences School - National University of Cordoba - Argentina</a></li>
       <li><a href="http://www.genesdigitales.com">Genes Digitales Bioinformatic group</a></li>
       <li><a href="http://www.agro.uba.ar/">Agronomy Faculty - Universidad de Buenos Aires - Argentina</a></li>
    </ul>
            
     <h2>Associated Sites</h2>
            
   <p>Latin American Solanaceae Network (<a href="http://cnia.inta.gov.ar/lat-sol">lat-SOL</a>) </p>
     <p>Solanaceae Genome Network (<a href="http://www.sgn.cornell.edu/index.pl">SOL</a>) </p>
    <p>European Solanaceae Network (<a href="http://www.eu-sol.net/">EU-SOL</a>) </p>



<h2>Other Tomato RNA Databases</h2>

<p>Tomato small RNAs: <a href="http://ted.bti.cornell.edu/cgi-bin/TFGD/sRNA/home.cgi">ted.bti.cornell.edu/cgi-bin/TFGD/sRNA/home.cgi</a></p>
<p>PMRD: plant microRNA database: <a href="http://bioinformatics.cau.edu.cn/PMRD/">bioinformatics.cau.edu.cn/PMRD</a></p>

<h2>Source Code and Database</h2>

<p>
Both data and source code can be downloaded from <a href="''')
            _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 884, col 59
            if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 884, col 59.
            write(u'''/miRNA.tar.gz">''')
            _v = VFFSL(SL,"fixurl",True) # u'$fixurl' on line 884, col 81
            if _v is not None: write(_filter(_v, rawExpr=u'$fixurl')) # from line 884, col 81.
            write(u'''/miRNA.tar.gz</a>. The license of the software is <a href="http://www.gnu.org/licenses/agpl-3.0.html">GNU Affero General Public License</a> version 3.
</p>
            
            <p class="note">
            Please cite: Ariel A Bazzini , Ramon Asis , Virginia Gonzalez , Sebastian Bassi , Mariana Conte , Marcelo Soria , Alisdair R Fernie , Sebastian Asurmendi and Fernando Carrari. "miSolRNA: A tomato micro RNA relational database.". 
BMC Plant Biology 2010, 10:240doi:10.1186/1471-2229-10-240
            </p>

''')
        write(u'''  

  
  
</div></div>
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src=\'" + gaJsHost + "google-analytics.com/ga.js\' type=\'text/javascript\'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
var pageTracker = _gat._getTracker("UA-99055-8");
pageTracker._initData();
pageTracker._trackPageview();
</script>
</body>
</html>
''')
        
        ########################################
        ## END - generated method body
        
        return _dummyTrans and trans.response().getvalue() or ""
        
    ##################################################
    ## CHEETAH GENERATED ATTRIBUTES


    _CHEETAH__instanceInitialized = False

    _CHEETAH_version = __CHEETAH_version__

    _CHEETAH_versionTuple = __CHEETAH_versionTuple__

    _CHEETAH_genTime = __CHEETAH_genTime__

    _CHEETAH_genTimestamp = __CHEETAH_genTimestamp__

    _CHEETAH_src = __CHEETAH_src__

    _CHEETAH_srcLastModified = __CHEETAH_srcLastModified__

    _mainCheetahMethod_for_index_template= 'respond'

## END CLASS DEFINITION

if not hasattr(index_template, '_initCheetahAttributes'):
    templateAPIClass = getattr(index_template, '_CHEETAH_templateClass', Template)
    templateAPIClass._addCheetahPlumbingCodeToClass(index_template)


# CHEETAH was developed by Tavis Rudd and Mike Orr
# with code, advice and input from many other volunteers.
# For more information visit http://www.CheetahTemplate.org/

##################################################
## if run from command line:
if __name__ == '__main__':
    from Cheetah.TemplateCmdLineIface import CmdLineIface
    CmdLineIface(templateObj=index_template()).run()


